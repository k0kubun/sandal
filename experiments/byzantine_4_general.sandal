data Command {
	Attack,
	Retreat,
}

proc LoyalGeneral(chSends []channel { Command }, chRecv1 channel { Command }, chRecv2 channel { Command }, chRecv3 channel { Command }) {
	var proposal Command
	choice {
		proposal = Attack
	}, {
		proposal = Retreat
	}

	for ch in chSends {
		send(ch, proposal)
	}

	// workaround for failing to assign int value
	var resp1 Command
	var resp2 Command
	var resp3 Command
	recv(chRecv1, resp1)
	recv(chRecv2, resp2)
	recv(chRecv3, resp3)
}

init {
	ch1_2 : channel { Command },
	ch1_3 : channel { Command },
	ch1_4 : channel { Command },
	ch2_1 : channel { Command },
	ch2_3 : channel { Command },
	ch2_4 : channel { Command },
	ch3_1 : channel { Command },
	ch3_2 : channel { Command },
	ch3_4 : channel { Command },
	ch4_1 : channel { Command },
	ch4_2 : channel { Command },
	ch4_3 : channel { Command },

	gen1 : LoyalGeneral([ch1_2, ch1_3, ch1_4], ch2_1, ch3_1, ch4_1),
	gen2 : LoyalGeneral([ch2_1, ch2_3, ch2_4], ch1_2, ch3_2, ch4_2),
	gen3 : LoyalGeneral([ch3_1, ch3_2, ch3_4], ch1_3, ch2_3, ch4_3),
	trt4 : LoyalGeneral([ch4_1, ch4_2, ch4_3], ch1_4, ch2_4, ch3_4),
}

ltl {
	F (gen1.proposal == Attack || gen1.proposal == Retreat)
}
