spec	: toplevel_body
	| toplevel_body spec

toplevel_body
	: data_def
	| module_def
	| const_def
	| proc_def
	| init_block
	| ltl_spec

data_def
	: DATA IDENTIFIER '{' idents_one '}' ';'

module_def
	: MODULE IDENTIFIER '(' parameters_zero ')' '{' module_body_zero '}' ';'

module_body_zero
	:
	| module_body module_body_zero

module_body
	: const_def
	| proc_def
	| init_block

const_def
	: CONST IDENTIFIER type ASSIGN expr ';'

proc_def
	: PROC IDENTIFIER '(' parameters_zero ')' '{' statements_zero '}' ';'

init_block
	: INIT '{' initvars_zero '}' ';'

ltl_spec
	: LTL '{' ltl_expr ';' '}' ';'
	| LTL '{' ltl_expr '}' ';'

initvars_zero
	:
	| initvars_one

initvars_one
	: initvar
	| initvar ','
	| initvar ',' initvars_one

initvar	: IDENTIFIER ':' type tags_zero
	| IDENTIFIER ':' IDENTIFIER '(' arguments_one ')' tags_zero

statements_zero
	:
	| statement statements_zero

statement
	: IDENTIFIER ':' statement
	| '{' statements_zero '}' ';'
	| VAR IDENTIFIER type ';'
	| VAR IDENTIFIER type ASSIGN expr ';'
	| IF expr '{' statements_zero '}' ';'
	| IF expr '{' statements_zero '}' ELSE '{' statements_zero '}' ';'
	| IDENTIFIER ASSIGN expr ';'
	| IDENTIFIER ADD_ASSIGN expr ';'
	| IDENTIFIER SUB_ASSIGN expr ';'
	| IDENTIFIER MUL_ASSIGN expr ';'
	| IDENTIFIER QUO_ASSIGN expr ';'
	| IDENTIFIER REM_ASSIGN expr ';'
	| IDENTIFIER AND_ASSIGN expr ';'
	| IDENTIFIER OR_ASSIGN expr ';'
	| IDENTIFIER XOR_ASSIGN expr ';'
	| IDENTIFIER SHL_ASSIGN expr ';'
	| IDENTIFIER SHR_ASSIGN expr ';'
	| CHOICE blocks_one ';'
	| RECV '(' arguments_one ')' ';'
	| PEEK '(' arguments_one ')' ';'
	| SEND '(' arguments_one ')' ';'
	| FOR '{' statements_zero '}' ';'
	| FOR IDENTIFIER IN expr '{' statements_zero '}' ';'
	| FOR IDENTIFIER IN RANGE expr TO expr '{' statements_zero '}' ';'
	| BREAK ';'
	| GOTO IDENTIFIER ';'
	| SKIP ';'
	| expr ';'
	| ';'
	| const_def

expr	: IDENTIFIER
	| NUMBER
	| TRUE
	| FALSE
	| NOT expr      %prec UNARY
	| SUB expr      %prec UNARY
	| '(' expr ')'
	| expr ADD expr
	| expr SUB expr
	| expr MUL expr
	| expr QUO expr
	| expr REM expr
	| expr AND expr
	| expr OR expr
	| expr XOR expr
	| expr SHL expr
	| expr SHR expr
	| expr LAND expr
	| expr LOR expr
	| expr EQL expr
	| expr LSS expr
	| expr GTR expr
	| expr NEQ expr
	| expr LEQ expr
	| expr GEQ expr
	| TIMEOUT_RECV '(' arguments_one ')'
	| TIMEOUT_PEEK '(' arguments_one ')'
	| NONBLOCK_RECV '(' arguments_one ')'
	| NONBLOCK_PEEK '(' arguments_one ')'
	| '[' arguments_one ']'

ltl_expr: ltl_atom
	| '(' ltl_expr ')'
	| ltl_expr LAND ltl_expr
	| ltl_expr LOR ltl_expr
	| ltl_expr XOR ltl_expr
	| ltl_expr THEN ltl_expr
	| ltl_expr EQL ltl_expr
	| ltl_expr 'U' ltl_expr
	| ltl_expr 'V' ltl_expr
	| ltl_expr 'S' ltl_expr
	| ltl_expr 'T' ltl_expr
	| NOT ltl_expr      %prec UNARY
	| 'X' ltl_expr      %prec UNARY
	| 'G' ltl_expr      %prec UNARY
	| 'F' ltl_expr      %prec UNARY
	| 'Y' ltl_expr      %prec UNARY
	| 'Z' ltl_expr      %prec UNARY
	| 'H' ltl_expr      %prec UNARY
	| 'O' ltl_expr      %prec UNARY

ltl_atom: IDENTIFIER
	| IDENTIFIER '.' ltl_atom

idents_one
	: IDENTIFIER
	| IDENTIFIER ','
	| IDENTIFIER ',' idents_one

parameters_zero
	:
	| parameters_one

parameters_one
	: parameter
	| parameter ','
	| parameter ',' parameters_one

parameter
	: IDENTIFIER type

arguments_one
	: expr
	| expr ','
	| expr ',' arguments_one

types_one
	: type
	| type ','
	| type ',' types_one

type	: IDENTIFIER
	| '[' ']' type
	| CHANNEL '{' types_one '}'
	| CHANNEL '[' ']' '{' types_one '}'
	| CHANNEL '[' expr ']' '{' types_one '}'

tags_zero
	:
	| tags_one

tags_one
	: tag
	| tag tags_one

tag
	: '@' IDENTIFIER

blocks_one
	: '{' statements_zero '}'
	| '{' statements_zero '}' ','
	| '{' statements_zero '}' ',' blocks_one
